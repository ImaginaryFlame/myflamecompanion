// V√©rification des vid√©os en base de donn√©es
const { PrismaClient } = require('@prisma/client');

async function checkVideosDb() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üé• V√©rification des vid√©os en base de donn√©es...\n');
    
    // 1. Compter toutes les vid√©os
    const totalVideos = await prisma.video.count();
    console.log(`üìä Total vid√©os en base: ${totalVideos}`);
    
    if (totalVideos === 0) {
      console.log('‚ùå Aucune vid√©o trouv√©e en base !');
      console.log('üí° Causes possibles:');
      console.log('   - Les vid√©os ne sont pas r√©cup√©r√©es par l\'API YouTube/Twitch');
      console.log('   - Probl√®me dans la fonction de cr√©ation des vid√©os');
      console.log('   - Les vid√©os existent mais sont filtr√©es\n');
    } else {
      // 2. Vid√©os par cha√Æne
      const videosByChaine = await prisma.video.groupBy({
        by: ['chaine_id'],
        _count: {
          id: true
        },
        include: {
          chaine: {
            select: {
              nom: true,
              type: true
            }
          }
        }
      });
      
      console.log('\nüìä R√©partition par cha√Æne:');
      for (const group of videosByChaine) {
        const chaine = await prisma.chaine.findUnique({
          where: { id: group.chaine_id },
          select: { nom: true, type: true }
        });
        console.log(`   - ${chaine?.nom} (${chaine?.type}): ${group._count.id} vid√©os`);
      }
    }
    
    // 3. Derni√®res vid√©os
    const dernieresVideos = await prisma.video.findMany({
      include: {
        chaine: {
          select: {
            nom: true,
            type: true
          }
        }
      },
      orderBy: {
        date_publication: 'desc'
      },
      take: 5
    });
    
    if (dernieresVideos.length > 0) {
      console.log('\nüé¨ Derni√®res vid√©os:');
      dernieresVideos.forEach((video, index) => {
        console.log(`   ${index + 1}. "${video.titre}"`);
        console.log(`      Cha√Æne: ${video.chaine.nom} (${video.chaine.type})`);
        console.log(`      Publi√©: ${video.date_publication.toLocaleDateString()}`);
        console.log(`      Dur√©e: ${video.duree}s - Vues: ${video.vues}`);
        console.log('');
      });
    }
    
    // 4. V√©rifier les cha√Ænes
    const chainesAvecVideos = await prisma.chaine.findMany({
      include: {
        _count: {
          select: {
            videos: true
          }
        }
      }
    });
    
    console.log('üì∫ √âtat des cha√Ænes:');
    chainesAvecVideos.forEach(chaine => {
      console.log(`   - ${chaine.nom} (${chaine.type || chaine.plateforme}): ${chaine._count.videos} vid√©os`);
      console.log(`     Channel ID: ${chaine.channel_id || 'N/A'}`);
      console.log(`     Actif: ${chaine.actif ? '‚úÖ' : '‚ùå'}`);
      console.log('');
    });
    
    // 5. Test de l'API vid√©os
    console.log('üîç Test des APIs vid√©os:');
    try {
      // Test YouTube
      const ytResponse = await fetch('http://localhost:3000/api/chaines/videos?type=youtube');
      if (ytResponse.ok) {
        const ytData = await ytResponse.json();
        console.log(`   - API YouTube: ${ytData.success ? '‚úÖ' : '‚ùå'} - ${ytData.data?.length || 0} vid√©os`);
      } else {
        console.log(`   - API YouTube: ‚ùå Status ${ytResponse.status}`);
      }
      
      // Test Twitch
      const twitchResponse = await fetch('http://localhost:3000/api/chaines/videos?type=twitch');
      if (twitchResponse.ok) {
        const twitchData = await twitchResponse.json();
        console.log(`   - API Twitch: ${twitchData.success ? '‚úÖ' : '‚ùå'} - ${twitchData.data?.length || 0} vid√©os`);
      } else {
        console.log(`   - API Twitch: ‚ùå Status ${twitchResponse.status}`);
      }
    } catch (error) {
      console.log('   - ‚ùå Erreur test APIs:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkVideosDb(); 